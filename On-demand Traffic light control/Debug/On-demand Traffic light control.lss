
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000b5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001021  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  00001cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad2  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a4  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059b  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003ba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4d 02 	call	0x49a	; 0x49a <main>
  74:	0c 94 71 05 	jmp	0xae2	; 0xae2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
void APP_init(void)
{
	
	//LED Initializing
	//Car LEDs
	LED_init(LED_CAR_PORT,LED_CAR_GREEN_PIN); // Car green LED
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_YELLOW_PIN); // Car yellow LED
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_RED_PIN); // Car red LED
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_init>
	//pedestrian LEDs
	LED_init(LED_PED_PORT,LED_PED_GREEN_PIN); // Pedestrian green LED
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_init>
	LED_init(LED_PED_PORT,LED_PED_YELLOW_PIN); // Pedestrian Yellow LED
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_init>
	LED_init(LED_PED_PORT,LED_PED_RED_PIN); // Pedestrian red LED
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_init>
	
	//Button Initializing
	BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	83 e4       	ldi	r24, 0x43	; 67
  b0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <BUTTON_init>
	
	//Timer Initializing
	TIMER_init();
  b4:	0e 94 ef 01 	call	0x3de	; 0x3de <TIMER_init>
	
	//Interrupts  Initializing
	//1- Enable global interrupts - setting bit 7 in the status register to 1
	SREG |=(1<<7);
  b8:	8f b7       	in	r24, 0x3f	; 63
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	8f bf       	out	0x3f, r24	; 63
	//2- Choose the external interrupt sense - sense on rising edge
	MCUCR |=(1<<0) |(1<<1);
  be:	85 b7       	in	r24, 0x35	; 53
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	85 bf       	out	0x35, r24	; 53
	//3- Enable external interrupt - bit 6 related to INT0
	GICR |=(1<<6);
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8b bf       	out	0x3b, r24	; 59
  ca:	08 95       	ret

000000cc <APP_start>:
{
	/*Car green on: if the mode is normal the car green LED will be on for 5 seconds
	through this time we will check if the button had been pressed or not.
	if presses : we will go to pedestrian mode.
	if not will go to normal mode with yellow car LED*/
	if(mode==NORMAL_GREEN)
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	81 11       	cpse	r24, r1
  d2:	24 c0       	rjmp	.+72     	; 0x11c <APP_start+0x50>
	{
		
		for(i=0;i<40;i++)
  d4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
  d8:	19 c0       	rjmp	.+50     	; 0x10c <APP_start+0x40>
		{
		LED_on(LED_CAR_PORT,LED_CAR_GREEN_PIN);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LED_on>
		TIMER_delay(122);
  e2:	8a e7       	ldi	r24, 0x7A	; 122
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TIMER_delay>
		if(mode == PEDESTRAIN)
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	86 30       	cpi	r24, 0x06	; 6
  f0:	41 f4       	brne	.+16     	; 0x102 <APP_start+0x36>
			{
				mode = PEDESTRAIN_CAR_GREEN;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
				break;
 100:	09 c0       	rjmp	.+18     	; 0x114 <APP_start+0x48>
	if presses : we will go to pedestrian mode.
	if not will go to normal mode with yellow car LED*/
	if(mode==NORMAL_GREEN)
	{
		
		for(i=0;i<40;i++)
 102:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 10c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 110:	88 32       	cpi	r24, 0x28	; 40
 112:	18 f3       	brcs	.-58     	; 0xda <APP_start+0xe>
				LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
				break;
			}
		
		}
		LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		
	}
	//
	if(mode!=PEDESTRAIN_CAR_GREEN)mode= NORMAL_YELLOW_A;
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	19 f0       	breq	.+6      	; 0x12a <APP_start+0x5e>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	/*Car yellow blink: if the mode is normal the car Yellow LED will be blink for 5 seconds
	through this time we will check if the button had been pressed or not.
	if presses : we will go to pedestrian mode.
	if not will go to normal mode with Red car LED*/
	if(mode== NORMAL_YELLOW_A)
 12a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	21 f5       	brne	.+72     	; 0x17a <APP_start+0xae>
	{
		
		for(i=0;i<20;i++)
 132:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 136:	19 c0       	rjmp	.+50     	; 0x16a <APP_start+0x9e>
		{
		LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LED_toggle>
		TIMER_delay(247);
 140:	87 ef       	ldi	r24, 0xF7	; 247
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TIMER_delay>
			if(mode == PEDESTRAIN)
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14c:	86 30       	cpi	r24, 0x06	; 6
 14e:	41 f4       	brne	.+16     	; 0x160 <APP_start+0x94>
			{
				mode = PEDESTRAIN_CAR_YELLOW;
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	81 e4       	ldi	r24, 0x41	; 65
 15a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
				break;	
 15e:	09 c0       	rjmp	.+18     	; 0x172 <APP_start+0xa6>
	if presses : we will go to pedestrian mode.
	if not will go to normal mode with Red car LED*/
	if(mode== NORMAL_YELLOW_A)
	{
		
		for(i=0;i<20;i++)
 160:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 16a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 16e:	84 31       	cpi	r24, 0x14	; 20
 170:	18 f3       	brcs	.-58     	; 0x138 <APP_start+0x6c>
				mode = PEDESTRAIN_CAR_YELLOW;
				LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
				break;	
			}
		}
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		
	}
	
	//
	if((mode!=PEDESTRAIN_CAR_YELLOW) && (mode!=PEDESTRAIN_CAR_GREEN) )
 17a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17e:	9d ef       	ldi	r25, 0xFD	; 253
 180:	98 0f       	add	r25, r24
 182:	92 30       	cpi	r25, 0x02	; 2
 184:	20 f0       	brcs	.+8      	; 0x18e <APP_start+0xc2>
		{
			mode= NORMAL_RED;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 18c:	08 c0       	rjmp	.+16     	; 0x19e <APP_start+0xd2>
		}
	else if(mode == PEDESTRAIN_CAR_GREEN)
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	19 f4       	brne	.+6      	; 0x198 <APP_start+0xcc>
	{
		mode = PEDESTRAIN_CAR_GREEN;
 192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 196:	03 c0       	rjmp	.+6      	; 0x19e <APP_start+0xd2>
	}
	else
	{
		mode = PEDESTRAIN_CAR_YELLOW;
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	/*Car Red on: if the mode is normal the car red LED will be on for 5 seconds
	through this time we will check if the button had been pressed or not.
	if presses : we will go to pedestrian mode.
	if not will go to normal mode with yellow car LED*/
	if(mode== NORMAL_RED)
 19e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	21 f5       	brne	.+72     	; 0x1ee <APP_start+0x122>
	{	
		for(i=0;i<40;i++)
 1a6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 1aa:	19 c0       	rjmp	.+50     	; 0x1de <APP_start+0x112>
		{
			LED_on(LED_CAR_PORT,LED_CAR_RED_PIN);
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LED_on>
			TIMER_delay(122);
 1b4:	8a e7       	ldi	r24, 0x7A	; 122
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TIMER_delay>
			if(mode == PEDESTRAIN)
 1bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	86 30       	cpi	r24, 0x06	; 6
 1c2:	41 f4       	brne	.+16     	; 0x1d4 <APP_start+0x108>
			{
				mode = PEDESTRAIN_CAR_RED;
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
				break;
 1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <APP_start+0x11a>
	through this time we will check if the button had been pressed or not.
	if presses : we will go to pedestrian mode.
	if not will go to normal mode with yellow car LED*/
	if(mode== NORMAL_RED)
	{	
		for(i=0;i<40;i++)
 1d4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 1de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 1e2:	88 32       	cpi	r24, 0x28	; 40
 1e4:	18 f3       	brcs	.-58     	; 0x1ac <APP_start+0xe0>
				mode = PEDESTRAIN_CAR_RED;
				LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
				break;
			}
		}
		LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	81 e4       	ldi	r24, 0x41	; 65
 1ea:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		
	}
	
	
	if((mode!=PEDESTRAIN_CAR_YELLOW) && (mode!=PEDESTRAIN_CAR_GREEN)  && (mode!=PEDESTRAIN_CAR_RED))
 1ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f2:	9d ef       	ldi	r25, 0xFD	; 253
 1f4:	98 0f       	add	r25, r24
 1f6:	93 30       	cpi	r25, 0x03	; 3
 1f8:	20 f0       	brcs	.+8      	; 0x202 <APP_start+0x136>
	{
		mode= NORMAL_YELLOW_B;
 1fa:	87 e0       	ldi	r24, 0x07	; 7
 1fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 200:	0d c0       	rjmp	.+26     	; 0x21c <APP_start+0x150>
	}
	else if(mode == PEDESTRAIN_CAR_GREEN)
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	19 f4       	brne	.+6      	; 0x20c <APP_start+0x140>
	{
		mode = PEDESTRAIN_CAR_GREEN;
 206:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 20a:	08 c0       	rjmp	.+16     	; 0x21c <APP_start+0x150>
	}
	else if(mode == PEDESTRAIN_CAR_YELLOW)
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	19 f4       	brne	.+6      	; 0x216 <APP_start+0x14a>
	{
		mode = PEDESTRAIN_CAR_YELLOW;
 210:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 214:	03 c0       	rjmp	.+6      	; 0x21c <APP_start+0x150>
	}
	else 
	{
		mode = PEDESTRAIN_CAR_RED;
 216:	85 e0       	ldi	r24, 0x05	; 5
 218:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	/*Car yellow blink (not to go to red directly): if the mode is normal the car Yellow LED will be blink for 5 seconds
	through this time we will check if the button had been pressed or not.
	if presses : we will go to pedestrian mode.
	if not will go to normal mode with green car LED - to repeat all the steps*/
	if(mode== NORMAL_YELLOW_B)
 21c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 220:	87 30       	cpi	r24, 0x07	; 7
 222:	21 f5       	brne	.+72     	; 0x26c <APP_start+0x1a0>
	{
		
		for(i=0;i<20;i++)
 224:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 228:	19 c0       	rjmp	.+50     	; 0x25c <APP_start+0x190>
		{
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LED_toggle>
			TIMER_delay(247);
 232:	87 ef       	ldi	r24, 0xF7	; 247
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TIMER_delay>
			if(mode == PEDESTRAIN)
 23a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23e:	86 30       	cpi	r24, 0x06	; 6
 240:	41 f4       	brne	.+16     	; 0x252 <APP_start+0x186>
			{
				mode = PEDESTRAIN_CAR_YELLOW;
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	81 e4       	ldi	r24, 0x41	; 65
 24c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
				break;
 250:	09 c0       	rjmp	.+18     	; 0x264 <APP_start+0x198>
	if presses : we will go to pedestrian mode.
	if not will go to normal mode with green car LED - to repeat all the steps*/
	if(mode== NORMAL_YELLOW_B)
	{
		
		for(i=0;i<20;i++)
 252:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 25c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 260:	84 31       	cpi	r24, 0x14	; 20
 262:	18 f3       	brcs	.-58     	; 0x22a <APP_start+0x15e>
				LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
				break;
			}
			
		}
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	81 e4       	ldi	r24, 0x41	; 65
 268:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		
	}
	
	
	if((mode!=PEDESTRAIN_CAR_YELLOW) && (mode!=PEDESTRAIN_CAR_GREEN)  && (mode!=PEDESTRAIN_CAR_RED))
 26c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 270:	9d ef       	ldi	r25, 0xFD	; 253
 272:	98 0f       	add	r25, r24
 274:	93 30       	cpi	r25, 0x03	; 3
 276:	18 f0       	brcs	.+6      	; 0x27e <APP_start+0x1b2>
	{
		mode= NORMAL_GREEN;
 278:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	0d c0       	rjmp	.+26     	; 0x298 <APP_start+0x1cc>
	}
	else if(mode == PEDESTRAIN_CAR_GREEN)
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	19 f4       	brne	.+6      	; 0x288 <APP_start+0x1bc>
	{
		mode = PEDESTRAIN_CAR_GREEN;
 282:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 286:	08 c0       	rjmp	.+16     	; 0x298 <APP_start+0x1cc>
	}
	else if(mode == PEDESTRAIN_CAR_YELLOW)
 288:	84 30       	cpi	r24, 0x04	; 4
 28a:	19 f4       	brne	.+6      	; 0x292 <APP_start+0x1c6>
	{
		mode = PEDESTRAIN_CAR_YELLOW;
 28c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 290:	03 c0       	rjmp	.+6      	; 0x298 <APP_start+0x1cc>
	}
	else
	{
		mode = PEDESTRAIN_CAR_RED;
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	


	
	//if the button pressed while car LED is green or yellow
	if((mode == PEDESTRAIN_CAR_GREEN) ||(mode == PEDESTRAIN_CAR_YELLOW))
 298:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 29c:	83 50       	subi	r24, 0x03	; 3
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	58 f5       	brcc	.+86     	; 0x2f8 <APP_start+0x22c>
	{
		
		//The both yellows will blink, pedestrian LED red will be on
		for(i=0;i<20;i++)
 2a2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <APP_start+0x206>
		{
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LED_toggle>
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	82 e4       	ldi	r24, 0x42	; 66
 2b4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LED_toggle>
			LED_on(LED_PED_PORT,LED_PED_RED_PIN);
 2b8:	62 e0       	ldi	r22, 0x02	; 2
 2ba:	82 e4       	ldi	r24, 0x42	; 66
 2bc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LED_on>
			TIMER_delay(247);
 2c0:	87 ef       	ldi	r24, 0xF7	; 247
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TIMER_delay>
	//if the button pressed while car LED is green or yellow
	if((mode == PEDESTRAIN_CAR_GREEN) ||(mode == PEDESTRAIN_CAR_YELLOW))
	{
		
		//The both yellows will blink, pedestrian LED red will be on
		for(i=0;i<20;i++)
 2c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 2d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 2d6:	84 31       	cpi	r24, 0x14	; 20
 2d8:	38 f3       	brcs	.-50     	; 0x2a8 <APP_start+0x1dc>
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
			LED_on(LED_PED_PORT,LED_PED_RED_PIN);
			TIMER_delay(247);
		}
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	81 e4       	ldi	r24, 0x41	; 65
 2de:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	82 e4       	ldi	r24, 0x42	; 66
 2e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_RED_PIN);
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	82 e4       	ldi	r24, 0x42	; 66
 2ee:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		mode= PEDESTRAIN_CAR_RED;
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	//continue the pedestrian mode or button pressed at normal mode with car red LED is on.
	if(mode == PEDESTRAIN_CAR_RED)
 2f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2fc:	85 30       	cpi	r24, 0x05	; 5
 2fe:	09 f0       	breq	.+2      	; 0x302 <APP_start+0x236>
 300:	4b c0       	rjmp	.+150    	; 0x398 <APP_start+0x2cc>
	{
		//Car red is on and pedestrian green is on for 5 seconds
		LED_on(LED_CAR_PORT,LED_CAR_RED_PIN);
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	81 e4       	ldi	r24, 0x41	; 65
 306:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LED_on>
		LED_on(LED_PED_PORT,LED_PED_GREEN_PIN);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	82 e4       	ldi	r24, 0x42	; 66
 30e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LED_on>
		TIMER_delay(4980);
 312:	84 e7       	ldi	r24, 0x74	; 116
 314:	93 e1       	ldi	r25, 0x13	; 19
 316:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		
		//both yellow blink, pedestrian still green  on for 5 seconds
		for(i=0;i<20;i++)
 322:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
 326:	11 c0       	rjmp	.+34     	; 0x34a <APP_start+0x27e>
		{
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e4       	ldi	r24, 0x41	; 65
 32c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LED_toggle>
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	82 e4       	ldi	r24, 0x42	; 66
 334:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LED_toggle>
			TIMER_delay(247);
 338:	87 ef       	ldi	r24, 0xF7	; 247
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TIMER_delay>
		LED_on(LED_PED_PORT,LED_PED_GREEN_PIN);
		TIMER_delay(4980);
		LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
		
		//both yellow blink, pedestrian still green  on for 5 seconds
		for(i=0;i<20;i++)
 340:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
 34a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 34e:	84 31       	cpi	r24, 0x14	; 20
 350:	58 f3       	brcs	.-42     	; 0x328 <APP_start+0x25c>
		{
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
			TIMER_delay(247);
		}
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	81 e4       	ldi	r24, 0x41	; 65
 356:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	82 e4       	ldi	r24, 0x42	; 66
 35e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_GREEN_PIN);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	82 e4       	ldi	r24, 0x42	; 66
 366:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		
		/*car green on - pedestrian red on - at the end of this 5 seconds 
		the system will transfer to normal mode again with yellow car LED blinking*/
		LED_on(LED_CAR_PORT,LED_CAR_GREEN_PIN);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	81 e4       	ldi	r24, 0x41	; 65
 36e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LED_on>
		LED_on(LED_PED_PORT,LED_PED_RED_PIN);
 372:	62 e0       	ldi	r22, 0x02	; 2
 374:	82 e4       	ldi	r24, 0x42	; 66
 376:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LED_on>
		TIMER_delay(4980);
 37a:	84 e7       	ldi	r24, 0x74	; 116
 37c:	93 e1       	ldi	r25, 0x13	; 19
 37e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	81 e4       	ldi	r24, 0x41	; 65
 386:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_RED_PIN);
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	82 e4       	ldi	r24, 0x42	; 66
 38e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_off>
		mode = NORMAL_YELLOW_A;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 398:	08 95       	ret

0000039a <__vector_1>:
	}
}
//Interrupt to check the button status
ISR(EXT_INT_0)
{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
	mode=6;
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ac:	8f 91       	pop	r24
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <BUTTON_init>:


// Button Initialization
void BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	DIO_init(buttonPort, buttonPin, IN); //Input device
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_init>
 3be:	08 95       	ret

000003c0 <LED_init>:


// Initialize LED
void LED_init(uint8_t ledPort,uint8_t ledPin)
{
	DIO_init(ledPort,ledPin,OUT);// Output device
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_init>
 3c6:	08 95       	ret

000003c8 <LED_on>:


// LED on
void LED_on(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort, ledPin, HIGH);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_write>
 3ce:	08 95       	ret

000003d0 <LED_off>:


// LED off 
void LED_off(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort, ledPin, LOW);
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_write>
 3d6:	08 95       	ret

000003d8 <LED_toggle>:


// Toggle LED 
void LED_toggle(uint8_t ledPort,uint8_t ledPin)
{
	DIO_toggle(ledPort, ledPin);
 3d8:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_toggle>
 3dc:	08 95       	ret

000003de <TIMER_init>:
#include <math.h>

// Timer Initialization
void TIMER_init()
{
	TCCR0 = 0x00; //normal mode
 3de:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; //Starting value
 3e0:	12 be       	out	0x32, r1	; 50
 3e2:	08 95       	ret

000003e4 <TIMER_delay>:
} 

// set delay in ms
void TIMER_delay (uint16_t timerMS)
{
 3e4:	8f 92       	push	r8
 3e6:	9f 92       	push	r9
 3e8:	af 92       	push	r10
 3ea:	bf 92       	push	r11
 3ec:	cf 92       	push	r12
 3ee:	df 92       	push	r13
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
	uint16_t overFlowCounter=0, timerInitial=0;
	uint32_t numberOverFlow=0;
	
	//Tmaxdelay=262.144ms  (2^8)*(1024/10^6)    Fcpu=10^6   prescaler= 1024
	numberOverFlow= ceil(timerMS/262.144);
 3f8:	bc 01       	movw	r22, r24
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 a2 04 	call	0x944	; 0x944 <__floatunsisf>
 402:	4b 01       	movw	r8, r22
 404:	5c 01       	movw	r10, r24
 406:	2f e6       	ldi	r18, 0x6F	; 111
 408:	32 e1       	ldi	r19, 0x12	; 18
 40a:	43 e8       	ldi	r20, 0x83	; 131
 40c:	53 e4       	ldi	r21, 0x43	; 67
 40e:	0e 94 01 04 	call	0x802	; 0x802 <__divsf3>
 412:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <ceil>
 416:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixunssfsi>
 41a:	6b 01       	movw	r12, r22
 41c:	7c 01       	movw	r14, r24
 41e:	eb 01       	movw	r28, r22
	timerInitial=(256-((timerMS/1.024)/(numberOverFlow)));
 420:	2f e6       	ldi	r18, 0x6F	; 111
 422:	32 e1       	ldi	r19, 0x12	; 18
 424:	43 e8       	ldi	r20, 0x83	; 131
 426:	5f e3       	ldi	r21, 0x3F	; 63
 428:	c5 01       	movw	r24, r10
 42a:	b4 01       	movw	r22, r8
 42c:	0e 94 01 04 	call	0x802	; 0x802 <__divsf3>
 430:	4b 01       	movw	r8, r22
 432:	5c 01       	movw	r10, r24
 434:	b6 01       	movw	r22, r12
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 a2 04 	call	0x944	; 0x944 <__floatunsisf>
 43e:	9b 01       	movw	r18, r22
 440:	ac 01       	movw	r20, r24
 442:	c5 01       	movw	r24, r10
 444:	b4 01       	movw	r22, r8
 446:	0e 94 01 04 	call	0x802	; 0x802 <__divsf3>
 44a:	9b 01       	movw	r18, r22
 44c:	ac 01       	movw	r20, r24
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	93 e4       	ldi	r25, 0x43	; 67
 456:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__subsf3>
 45a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixunssfsi>
	
	
	TCNT0 = timerInitial; 
 45e:	62 bf       	out	0x32, r22	; 50
	//set 1024 prescaler
	TCCR0 |=(1<<0) | (1<<2);
 460:	83 b7       	in	r24, 0x33	; 51
 462:	85 60       	ori	r24, 0x05	; 5
 464:	83 bf       	out	0x33, r24	; 51
} 

// set delay in ms
void TIMER_delay (uint16_t timerMS)
{
	uint16_t overFlowCounter=0, timerInitial=0;
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
	
	
	TCNT0 = timerInitial; 
	//set 1024 prescaler
	TCCR0 |=(1<<0) | (1<<2);
	while(overFlowCounter< numberOverFlow)
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	{
		while((TIFR &(1<<0))==0);
 46c:	08 b6       	in	r0, 0x38	; 56
 46e:	00 fe       	sbrs	r0, 0
 470:	fd cf       	rjmp	.-6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		
		TIFR |=(1<<0); // Clear the over flow flag 
 472:	88 b7       	in	r24, 0x38	; 56
 474:	81 60       	ori	r24, 0x01	; 1
 476:	88 bf       	out	0x38, r24	; 56
		overFlowCounter++;
 478:	2f 5f       	subi	r18, 0xFF	; 255
 47a:	3f 4f       	sbci	r19, 0xFF	; 255
	
	
	TCNT0 = timerInitial; 
	//set 1024 prescaler
	TCCR0 |=(1<<0) | (1<<2);
	while(overFlowCounter< numberOverFlow)
 47c:	2c 17       	cp	r18, r28
 47e:	3d 07       	cpc	r19, r29
 480:	a8 f3       	brcs	.-22     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		TIFR |=(1<<0); // Clear the over flow flag 
		overFlowCounter++;
	}
	
	overFlowCounter = 0;
	TCCR0 = 0x00; // Timer stop
 482:	13 be       	out	0x33, r1	; 51
	
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	df 90       	pop	r13
 48e:	cf 90       	pop	r12
 490:	bf 90       	pop	r11
 492:	af 90       	pop	r10
 494:	9f 90       	pop	r9
 496:	8f 90       	pop	r8
 498:	08 95       	ret

0000049a <main>:
#include "MCAL/DIO Driver/dio.h"

int main(void)
{
    /* Initializing */
	APP_init();
 49a:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	
	/* Starting Application */
 while (1) 
    {
		APP_start();
 49e:	0e 94 66 00 	call	0xcc	; 0xcc <APP_start>
 4a2:	fd cf       	rjmp	.-6      	; 0x49e <main+0x4>

000004a4 <DIO_init>:
#include "dio.h"

 // Initialize the DIO direction
void DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction)
{
	switch(portNumber)
 4a4:	82 34       	cpi	r24, 0x42	; 66
 4a6:	31 f1       	breq	.+76     	; 0x4f4 <DIO_init+0x50>
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <DIO_init+0xc>
 4aa:	81 34       	cpi	r24, 0x41	; 65
 4ac:	39 f0       	breq	.+14     	; 0x4bc <DIO_init+0x18>
 4ae:	08 95       	ret
 4b0:	83 34       	cpi	r24, 0x43	; 67
 4b2:	e1 f1       	breq	.+120    	; 0x52c <DIO_init+0x88>
 4b4:	84 34       	cpi	r24, 0x44	; 68
 4b6:	09 f4       	brne	.+2      	; 0x4ba <DIO_init+0x16>
 4b8:	54 c0       	rjmp	.+168    	; 0x562 <DIO_init+0xbe>
 4ba:	08 95       	ret
	{
		case PORT_A:
		if(direction == IN)
 4bc:	41 11       	cpse	r20, r1
 4be:	0c c0       	rjmp	.+24     	; 0x4d8 <DIO_init+0x34>
		{
			DDRA &=~(1<<pinNumber); //Input
 4c0:	2a b3       	in	r18, 0x1a	; 26
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_init+0x28>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_init+0x24>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	8a bb       	out	0x1a, r24	; 26
 4d6:	08 95       	ret
		}
		else if(direction == OUT)
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	09 f0       	breq	.+2      	; 0x4de <DIO_init+0x3a>
 4dc:	5c c0       	rjmp	.+184    	; 0x596 <DIO_init+0xf2>
		{
			DDRA |=(1<<pinNumber);  //Output
 4de:	2a b3       	in	r18, 0x1a	; 26
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_init+0x46>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_init+0x42>
 4ee:	82 2b       	or	r24, r18
 4f0:	8a bb       	out	0x1a, r24	; 26
 4f2:	08 95       	ret
			//Error Handling
		}
		break;
		
		case PORT_B:
		if(direction == IN)
 4f4:	41 11       	cpse	r20, r1
 4f6:	0c c0       	rjmp	.+24     	; 0x510 <DIO_init+0x6c>
		{
			DDRB &=~(1<<pinNumber); //Input
 4f8:	27 b3       	in	r18, 0x17	; 23
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_init+0x60>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_init+0x5c>
 508:	80 95       	com	r24
 50a:	82 23       	and	r24, r18
 50c:	87 bb       	out	0x17, r24	; 23
 50e:	08 95       	ret
		}
		else if(direction == OUT)
 510:	41 30       	cpi	r20, 0x01	; 1
 512:	09 f0       	breq	.+2      	; 0x516 <DIO_init+0x72>
 514:	40 c0       	rjmp	.+128    	; 0x596 <DIO_init+0xf2>
		{
			DDRB |=(1<<pinNumber);  //Output
 516:	27 b3       	in	r18, 0x17	; 23
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_init+0x7e>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_init+0x7a>
 526:	82 2b       	or	r24, r18
 528:	87 bb       	out	0x17, r24	; 23
 52a:	08 95       	ret
			//Error Handling
		}
		break;
		
		case PORT_C:
		if(direction == IN)
 52c:	41 11       	cpse	r20, r1
 52e:	0c c0       	rjmp	.+24     	; 0x548 <DIO_init+0xa4>
		{
			DDRC &=~(1<<pinNumber); //Input
 530:	24 b3       	in	r18, 0x14	; 20
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_init+0x98>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_init+0x94>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	84 bb       	out	0x14, r24	; 20
 546:	08 95       	ret
		}
		else if(direction == OUT)
 548:	41 30       	cpi	r20, 0x01	; 1
 54a:	29 f5       	brne	.+74     	; 0x596 <DIO_init+0xf2>
		{
			DDRC |=(1<<pinNumber);  //Output
 54c:	24 b3       	in	r18, 0x14	; 20
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_init+0xb4>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_init+0xb0>
 55c:	82 2b       	or	r24, r18
 55e:	84 bb       	out	0x14, r24	; 20
 560:	08 95       	ret
			//Error Handling
		}
		break;
		
		case PORT_D:
		if(direction == IN)
 562:	41 11       	cpse	r20, r1
 564:	0c c0       	rjmp	.+24     	; 0x57e <DIO_init+0xda>
		{
			DDRD &=~(1<<pinNumber); //Input
 566:	21 b3       	in	r18, 0x11	; 17
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_init+0xce>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_init+0xca>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	81 bb       	out	0x11, r24	; 17
 57c:	08 95       	ret
		}
		else if(direction == OUT)
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	51 f4       	brne	.+20     	; 0x596 <DIO_init+0xf2>
		{
			DDRD |=(1<<pinNumber);  //Output
 582:	21 b3       	in	r18, 0x11	; 17
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_init+0xea>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_init+0xe6>
 592:	82 2b       	or	r24, r18
 594:	81 bb       	out	0x11, r24	; 17
 596:	08 95       	ret

00000598 <DIO_write>:


// Write data on DIO
void DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value)
{
	switch(portNumber)
 598:	82 34       	cpi	r24, 0x42	; 66
 59a:	31 f1       	breq	.+76     	; 0x5e8 <DIO_write+0x50>
 59c:	18 f4       	brcc	.+6      	; 0x5a4 <DIO_write+0xc>
 59e:	81 34       	cpi	r24, 0x41	; 65
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <DIO_write+0x18>
 5a2:	08 95       	ret
 5a4:	83 34       	cpi	r24, 0x43	; 67
 5a6:	e1 f1       	breq	.+120    	; 0x620 <DIO_write+0x88>
 5a8:	84 34       	cpi	r24, 0x44	; 68
 5aa:	09 f4       	brne	.+2      	; 0x5ae <DIO_write+0x16>
 5ac:	54 c0       	rjmp	.+168    	; 0x656 <DIO_write+0xbe>
 5ae:	08 95       	ret
	{
		case PORT_A:
		if(value == IN)
 5b0:	41 11       	cpse	r20, r1
 5b2:	0c c0       	rjmp	.+24     	; 0x5cc <DIO_write+0x34>
		{
			PORTA &=~(1<<pinNumber); // write 0 
 5b4:	2b b3       	in	r18, 0x1b	; 27
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_write+0x28>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_write+0x24>
 5c4:	80 95       	com	r24
 5c6:	82 23       	and	r24, r18
 5c8:	8b bb       	out	0x1b, r24	; 27
 5ca:	08 95       	ret
		}
		else if(value == OUT)
 5cc:	41 30       	cpi	r20, 0x01	; 1
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <DIO_write+0x3a>
 5d0:	5c c0       	rjmp	.+184    	; 0x68a <DIO_write+0xf2>
		{
			PORTA |=(1<<pinNumber);  // write 1
 5d2:	2b b3       	in	r18, 0x1b	; 27
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_write+0x46>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_write+0x42>
 5e2:	82 2b       	or	r24, r18
 5e4:	8b bb       	out	0x1b, r24	; 27
 5e6:	08 95       	ret
			//Error Handling
		}
		break;
		
		case PORT_B:
		if(value == IN)
 5e8:	41 11       	cpse	r20, r1
 5ea:	0c c0       	rjmp	.+24     	; 0x604 <DIO_write+0x6c>
		{
			PORTB &=~(1<<pinNumber); // write 0
 5ec:	28 b3       	in	r18, 0x18	; 24
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_write+0x60>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_write+0x5c>
 5fc:	80 95       	com	r24
 5fe:	82 23       	and	r24, r18
 600:	88 bb       	out	0x18, r24	; 24
 602:	08 95       	ret
		}
		else if(value == OUT)
 604:	41 30       	cpi	r20, 0x01	; 1
 606:	09 f0       	breq	.+2      	; 0x60a <DIO_write+0x72>
 608:	40 c0       	rjmp	.+128    	; 0x68a <DIO_write+0xf2>
		{
			PORTB |=(1<<pinNumber);  // write 1
 60a:	28 b3       	in	r18, 0x18	; 24
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_write+0x7e>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_write+0x7a>
 61a:	82 2b       	or	r24, r18
 61c:	88 bb       	out	0x18, r24	; 24
 61e:	08 95       	ret
			//Error Handling
		}
		break;
		
		case PORT_C:
		if(value == IN)
 620:	41 11       	cpse	r20, r1
 622:	0c c0       	rjmp	.+24     	; 0x63c <DIO_write+0xa4>
		{
			PORTC &=~(1<<pinNumber); // write 0
 624:	25 b3       	in	r18, 0x15	; 21
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_write+0x98>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_write+0x94>
 634:	80 95       	com	r24
 636:	82 23       	and	r24, r18
 638:	85 bb       	out	0x15, r24	; 21
 63a:	08 95       	ret
		}
		else if(value == OUT)
 63c:	41 30       	cpi	r20, 0x01	; 1
 63e:	29 f5       	brne	.+74     	; 0x68a <DIO_write+0xf2>
		{
			PORTC |=(1<<pinNumber);  // write 1
 640:	25 b3       	in	r18, 0x15	; 21
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_write+0xb4>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	6a 95       	dec	r22
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_write+0xb0>
 650:	82 2b       	or	r24, r18
 652:	85 bb       	out	0x15, r24	; 21
 654:	08 95       	ret
			//Error Handling
		}
		break;
		
		case PORT_D:
		if(value == IN)
 656:	41 11       	cpse	r20, r1
 658:	0c c0       	rjmp	.+24     	; 0x672 <DIO_write+0xda>
		{
			PORTD &=~(1<<pinNumber); // write 0
 65a:	22 b3       	in	r18, 0x12	; 18
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_write+0xce>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_write+0xca>
 66a:	80 95       	com	r24
 66c:	82 23       	and	r24, r18
 66e:	82 bb       	out	0x12, r24	; 18
 670:	08 95       	ret
		}
		else if(value == OUT)
 672:	41 30       	cpi	r20, 0x01	; 1
 674:	51 f4       	brne	.+20     	; 0x68a <DIO_write+0xf2>
		{
			PORTD |=(1<<pinNumber);  // write 1
 676:	22 b3       	in	r18, 0x12	; 18
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_write+0xea>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_write+0xe6>
 686:	82 2b       	or	r24, r18
 688:	82 bb       	out	0x12, r24	; 18
 68a:	08 95       	ret

0000068c <DIO_toggle>:


// Toggle the DIO
void DIO_toggle(uint8_t portNumber,uint8_t pinNumber)
{
	switch(portNumber)
 68c:	82 34       	cpi	r24, 0x42	; 66
 68e:	a1 f0       	breq	.+40     	; 0x6b8 <DIO_toggle+0x2c>
 690:	18 f4       	brcc	.+6      	; 0x698 <DIO_toggle+0xc>
 692:	81 34       	cpi	r24, 0x41	; 65
 694:	31 f0       	breq	.+12     	; 0x6a2 <DIO_toggle+0x16>
 696:	08 95       	ret
 698:	83 34       	cpi	r24, 0x43	; 67
 69a:	c9 f0       	breq	.+50     	; 0x6ce <DIO_toggle+0x42>
 69c:	84 34       	cpi	r24, 0x44	; 68
 69e:	11 f1       	breq	.+68     	; 0x6e4 <DIO_toggle+0x58>
 6a0:	08 95       	ret
	{
		case PORT_A:
		PORTA ^=(1<<pinNumber); // toggle bit
 6a2:	2b b3       	in	r18, 0x1b	; 27
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_toggle+0x22>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	6a 95       	dec	r22
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_toggle+0x1e>
 6b2:	82 27       	eor	r24, r18
 6b4:	8b bb       	out	0x1b, r24	; 27
		break;
 6b6:	08 95       	ret
		
		case PORT_B:
		PORTB ^=(1<<pinNumber); // toggle bit
 6b8:	28 b3       	in	r18, 0x18	; 24
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_toggle+0x38>
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	6a 95       	dec	r22
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_toggle+0x34>
 6c8:	82 27       	eor	r24, r18
 6ca:	88 bb       	out	0x18, r24	; 24
		break;
 6cc:	08 95       	ret
		
		case PORT_C:
		PORTC ^=(1<<pinNumber); // toggle bit
 6ce:	25 b3       	in	r18, 0x15	; 21
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_toggle+0x4e>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	6a 95       	dec	r22
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_toggle+0x4a>
 6de:	82 27       	eor	r24, r18
 6e0:	85 bb       	out	0x15, r24	; 21
		break;
 6e2:	08 95       	ret
		
		case PORT_D:
		PORTD ^=(1<<pinNumber); // toggle bit
 6e4:	22 b3       	in	r18, 0x12	; 18
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_toggle+0x64>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_toggle+0x60>
 6f4:	82 27       	eor	r24, r18
 6f6:	82 bb       	out	0x12, r24	; 18
 6f8:	08 95       	ret

000006fa <__subsf3>:
 6fa:	50 58       	subi	r21, 0x80	; 128

000006fc <__addsf3>:
 6fc:	bb 27       	eor	r27, r27
 6fe:	aa 27       	eor	r26, r26
 700:	0e 94 95 03 	call	0x72a	; 0x72a <__addsf3x>
 704:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_round>
 708:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_pscA>
 70c:	38 f0       	brcs	.+14     	; 0x71c <__addsf3+0x20>
 70e:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_pscB>
 712:	20 f0       	brcs	.+8      	; 0x71c <__addsf3+0x20>
 714:	39 f4       	brne	.+14     	; 0x724 <__addsf3+0x28>
 716:	9f 3f       	cpi	r25, 0xFF	; 255
 718:	19 f4       	brne	.+6      	; 0x720 <__addsf3+0x24>
 71a:	26 f4       	brtc	.+8      	; 0x724 <__addsf3+0x28>
 71c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_nan>
 720:	0e f4       	brtc	.+2      	; 0x724 <__addsf3+0x28>
 722:	e0 95       	com	r30
 724:	e7 fb       	bst	r30, 7
 726:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_inf>

0000072a <__addsf3x>:
 72a:	e9 2f       	mov	r30, r25
 72c:	0e 94 30 05 	call	0xa60	; 0xa60 <__fp_split3>
 730:	58 f3       	brcs	.-42     	; 0x708 <__addsf3+0xc>
 732:	ba 17       	cp	r27, r26
 734:	62 07       	cpc	r22, r18
 736:	73 07       	cpc	r23, r19
 738:	84 07       	cpc	r24, r20
 73a:	95 07       	cpc	r25, r21
 73c:	20 f0       	brcs	.+8      	; 0x746 <__addsf3x+0x1c>
 73e:	79 f4       	brne	.+30     	; 0x75e <__addsf3x+0x34>
 740:	a6 f5       	brtc	.+104    	; 0x7aa <__addsf3x+0x80>
 742:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_zero>
 746:	0e f4       	brtc	.+2      	; 0x74a <__addsf3x+0x20>
 748:	e0 95       	com	r30
 74a:	0b 2e       	mov	r0, r27
 74c:	ba 2f       	mov	r27, r26
 74e:	a0 2d       	mov	r26, r0
 750:	0b 01       	movw	r0, r22
 752:	b9 01       	movw	r22, r18
 754:	90 01       	movw	r18, r0
 756:	0c 01       	movw	r0, r24
 758:	ca 01       	movw	r24, r20
 75a:	a0 01       	movw	r20, r0
 75c:	11 24       	eor	r1, r1
 75e:	ff 27       	eor	r31, r31
 760:	59 1b       	sub	r21, r25
 762:	99 f0       	breq	.+38     	; 0x78a <__addsf3x+0x60>
 764:	59 3f       	cpi	r21, 0xF9	; 249
 766:	50 f4       	brcc	.+20     	; 0x77c <__addsf3x+0x52>
 768:	50 3e       	cpi	r21, 0xE0	; 224
 76a:	68 f1       	brcs	.+90     	; 0x7c6 <__addsf3x+0x9c>
 76c:	1a 16       	cp	r1, r26
 76e:	f0 40       	sbci	r31, 0x00	; 0
 770:	a2 2f       	mov	r26, r18
 772:	23 2f       	mov	r18, r19
 774:	34 2f       	mov	r19, r20
 776:	44 27       	eor	r20, r20
 778:	58 5f       	subi	r21, 0xF8	; 248
 77a:	f3 cf       	rjmp	.-26     	; 0x762 <__addsf3x+0x38>
 77c:	46 95       	lsr	r20
 77e:	37 95       	ror	r19
 780:	27 95       	ror	r18
 782:	a7 95       	ror	r26
 784:	f0 40       	sbci	r31, 0x00	; 0
 786:	53 95       	inc	r21
 788:	c9 f7       	brne	.-14     	; 0x77c <__addsf3x+0x52>
 78a:	7e f4       	brtc	.+30     	; 0x7aa <__addsf3x+0x80>
 78c:	1f 16       	cp	r1, r31
 78e:	ba 0b       	sbc	r27, r26
 790:	62 0b       	sbc	r22, r18
 792:	73 0b       	sbc	r23, r19
 794:	84 0b       	sbc	r24, r20
 796:	ba f0       	brmi	.+46     	; 0x7c6 <__addsf3x+0x9c>
 798:	91 50       	subi	r25, 0x01	; 1
 79a:	a1 f0       	breq	.+40     	; 0x7c4 <__addsf3x+0x9a>
 79c:	ff 0f       	add	r31, r31
 79e:	bb 1f       	adc	r27, r27
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	c2 f7       	brpl	.-16     	; 0x798 <__addsf3x+0x6e>
 7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <__addsf3x+0x9c>
 7aa:	ba 0f       	add	r27, r26
 7ac:	62 1f       	adc	r22, r18
 7ae:	73 1f       	adc	r23, r19
 7b0:	84 1f       	adc	r24, r20
 7b2:	48 f4       	brcc	.+18     	; 0x7c6 <__addsf3x+0x9c>
 7b4:	87 95       	ror	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	b7 95       	ror	r27
 7bc:	f7 95       	ror	r31
 7be:	9e 3f       	cpi	r25, 0xFE	; 254
 7c0:	08 f0       	brcs	.+2      	; 0x7c4 <__addsf3x+0x9a>
 7c2:	b0 cf       	rjmp	.-160    	; 0x724 <__addsf3+0x28>
 7c4:	93 95       	inc	r25
 7c6:	88 0f       	add	r24, r24
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__addsf3x+0xa2>
 7ca:	99 27       	eor	r25, r25
 7cc:	ee 0f       	add	r30, r30
 7ce:	97 95       	ror	r25
 7d0:	87 95       	ror	r24
 7d2:	08 95       	ret

000007d4 <ceil>:
 7d4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_trunc>
 7d8:	90 f0       	brcs	.+36     	; 0x7fe <ceil+0x2a>
 7da:	9f 37       	cpi	r25, 0x7F	; 127
 7dc:	48 f4       	brcc	.+18     	; 0x7f0 <ceil+0x1c>
 7de:	91 11       	cpse	r25, r1
 7e0:	16 f4       	brtc	.+4      	; 0x7e6 <ceil+0x12>
 7e2:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	80 e8       	ldi	r24, 0x80	; 128
 7ec:	9f e3       	ldi	r25, 0x3F	; 63
 7ee:	08 95       	ret
 7f0:	26 f0       	brts	.+8      	; 0x7fa <ceil+0x26>
 7f2:	1b 16       	cp	r1, r27
 7f4:	61 1d       	adc	r22, r1
 7f6:	71 1d       	adc	r23, r1
 7f8:	81 1d       	adc	r24, r1
 7fa:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_mintl>
 7fe:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_mpack>

00000802 <__divsf3>:
 802:	0e 94 15 04 	call	0x82a	; 0x82a <__divsf3x>
 806:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_round>
 80a:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_pscB>
 80e:	58 f0       	brcs	.+22     	; 0x826 <__divsf3+0x24>
 810:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_pscA>
 814:	40 f0       	brcs	.+16     	; 0x826 <__divsf3+0x24>
 816:	29 f4       	brne	.+10     	; 0x822 <__divsf3+0x20>
 818:	5f 3f       	cpi	r21, 0xFF	; 255
 81a:	29 f0       	breq	.+10     	; 0x826 <__divsf3+0x24>
 81c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_inf>
 820:	51 11       	cpse	r21, r1
 822:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>
 826:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_nan>

0000082a <__divsf3x>:
 82a:	0e 94 30 05 	call	0xa60	; 0xa60 <__fp_split3>
 82e:	68 f3       	brcs	.-38     	; 0x80a <__divsf3+0x8>

00000830 <__divsf3_pse>:
 830:	99 23       	and	r25, r25
 832:	b1 f3       	breq	.-20     	; 0x820 <__divsf3+0x1e>
 834:	55 23       	and	r21, r21
 836:	91 f3       	breq	.-28     	; 0x81c <__divsf3+0x1a>
 838:	95 1b       	sub	r25, r21
 83a:	55 0b       	sbc	r21, r21
 83c:	bb 27       	eor	r27, r27
 83e:	aa 27       	eor	r26, r26
 840:	62 17       	cp	r22, r18
 842:	73 07       	cpc	r23, r19
 844:	84 07       	cpc	r24, r20
 846:	38 f0       	brcs	.+14     	; 0x856 <__divsf3_pse+0x26>
 848:	9f 5f       	subi	r25, 0xFF	; 255
 84a:	5f 4f       	sbci	r21, 0xFF	; 255
 84c:	22 0f       	add	r18, r18
 84e:	33 1f       	adc	r19, r19
 850:	44 1f       	adc	r20, r20
 852:	aa 1f       	adc	r26, r26
 854:	a9 f3       	breq	.-22     	; 0x840 <__divsf3_pse+0x10>
 856:	35 d0       	rcall	.+106    	; 0x8c2 <__stack+0x63>
 858:	0e 2e       	mov	r0, r30
 85a:	3a f0       	brmi	.+14     	; 0x86a <__stack+0xb>
 85c:	e0 e8       	ldi	r30, 0x80	; 128
 85e:	32 d0       	rcall	.+100    	; 0x8c4 <__stack+0x65>
 860:	91 50       	subi	r25, 0x01	; 1
 862:	50 40       	sbci	r21, 0x00	; 0
 864:	e6 95       	lsr	r30
 866:	00 1c       	adc	r0, r0
 868:	ca f7       	brpl	.-14     	; 0x85c <__divsf3_pse+0x2c>
 86a:	2b d0       	rcall	.+86     	; 0x8c2 <__stack+0x63>
 86c:	fe 2f       	mov	r31, r30
 86e:	29 d0       	rcall	.+82     	; 0x8c2 <__stack+0x63>
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	88 1f       	adc	r24, r24
 876:	bb 1f       	adc	r27, r27
 878:	26 17       	cp	r18, r22
 87a:	37 07       	cpc	r19, r23
 87c:	48 07       	cpc	r20, r24
 87e:	ab 07       	cpc	r26, r27
 880:	b0 e8       	ldi	r27, 0x80	; 128
 882:	09 f0       	breq	.+2      	; 0x886 <__stack+0x27>
 884:	bb 0b       	sbc	r27, r27
 886:	80 2d       	mov	r24, r0
 888:	bf 01       	movw	r22, r30
 88a:	ff 27       	eor	r31, r31
 88c:	93 58       	subi	r25, 0x83	; 131
 88e:	5f 4f       	sbci	r21, 0xFF	; 255
 890:	3a f0       	brmi	.+14     	; 0x8a0 <__stack+0x41>
 892:	9e 3f       	cpi	r25, 0xFE	; 254
 894:	51 05       	cpc	r21, r1
 896:	78 f0       	brcs	.+30     	; 0x8b6 <__stack+0x57>
 898:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_inf>
 89c:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>
 8a0:	5f 3f       	cpi	r21, 0xFF	; 255
 8a2:	e4 f3       	brlt	.-8      	; 0x89c <__stack+0x3d>
 8a4:	98 3e       	cpi	r25, 0xE8	; 232
 8a6:	d4 f3       	brlt	.-12     	; 0x89c <__stack+0x3d>
 8a8:	86 95       	lsr	r24
 8aa:	77 95       	ror	r23
 8ac:	67 95       	ror	r22
 8ae:	b7 95       	ror	r27
 8b0:	f7 95       	ror	r31
 8b2:	9f 5f       	subi	r25, 0xFF	; 255
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__stack+0x49>
 8b6:	88 0f       	add	r24, r24
 8b8:	91 1d       	adc	r25, r1
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret
 8c2:	e1 e0       	ldi	r30, 0x01	; 1
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	bb 1f       	adc	r27, r27
 8cc:	62 17       	cp	r22, r18
 8ce:	73 07       	cpc	r23, r19
 8d0:	84 07       	cpc	r24, r20
 8d2:	ba 07       	cpc	r27, r26
 8d4:	20 f0       	brcs	.+8      	; 0x8de <__stack+0x7f>
 8d6:	62 1b       	sub	r22, r18
 8d8:	73 0b       	sbc	r23, r19
 8da:	84 0b       	sbc	r24, r20
 8dc:	ba 0b       	sbc	r27, r26
 8de:	ee 1f       	adc	r30, r30
 8e0:	88 f7       	brcc	.-30     	; 0x8c4 <__stack+0x65>
 8e2:	e0 95       	com	r30
 8e4:	08 95       	ret

000008e6 <__fixunssfsi>:
 8e6:	0e 94 38 05 	call	0xa70	; 0xa70 <__fp_splitA>
 8ea:	88 f0       	brcs	.+34     	; 0x90e <__fixunssfsi+0x28>
 8ec:	9f 57       	subi	r25, 0x7F	; 127
 8ee:	98 f0       	brcs	.+38     	; 0x916 <__fixunssfsi+0x30>
 8f0:	b9 2f       	mov	r27, r25
 8f2:	99 27       	eor	r25, r25
 8f4:	b7 51       	subi	r27, 0x17	; 23
 8f6:	b0 f0       	brcs	.+44     	; 0x924 <__fixunssfsi+0x3e>
 8f8:	e1 f0       	breq	.+56     	; 0x932 <__fixunssfsi+0x4c>
 8fa:	66 0f       	add	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	1a f0       	brmi	.+6      	; 0x90a <__fixunssfsi+0x24>
 904:	ba 95       	dec	r27
 906:	c9 f7       	brne	.-14     	; 0x8fa <__fixunssfsi+0x14>
 908:	14 c0       	rjmp	.+40     	; 0x932 <__fixunssfsi+0x4c>
 90a:	b1 30       	cpi	r27, 0x01	; 1
 90c:	91 f0       	breq	.+36     	; 0x932 <__fixunssfsi+0x4c>
 90e:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fp_zero>
 912:	b1 e0       	ldi	r27, 0x01	; 1
 914:	08 95       	ret
 916:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_zero>
 91a:	67 2f       	mov	r22, r23
 91c:	78 2f       	mov	r23, r24
 91e:	88 27       	eor	r24, r24
 920:	b8 5f       	subi	r27, 0xF8	; 248
 922:	39 f0       	breq	.+14     	; 0x932 <__fixunssfsi+0x4c>
 924:	b9 3f       	cpi	r27, 0xF9	; 249
 926:	cc f3       	brlt	.-14     	; 0x91a <__fixunssfsi+0x34>
 928:	86 95       	lsr	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	b3 95       	inc	r27
 930:	d9 f7       	brne	.-10     	; 0x928 <__fixunssfsi+0x42>
 932:	3e f4       	brtc	.+14     	; 0x942 <__fixunssfsi+0x5c>
 934:	90 95       	com	r25
 936:	80 95       	com	r24
 938:	70 95       	com	r23
 93a:	61 95       	neg	r22
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	08 95       	ret

00000944 <__floatunsisf>:
 944:	e8 94       	clt
 946:	09 c0       	rjmp	.+18     	; 0x95a <__floatsisf+0x12>

00000948 <__floatsisf>:
 948:	97 fb       	bst	r25, 7
 94a:	3e f4       	brtc	.+14     	; 0x95a <__floatsisf+0x12>
 94c:	90 95       	com	r25
 94e:	80 95       	com	r24
 950:	70 95       	com	r23
 952:	61 95       	neg	r22
 954:	7f 4f       	sbci	r23, 0xFF	; 255
 956:	8f 4f       	sbci	r24, 0xFF	; 255
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	99 23       	and	r25, r25
 95c:	a9 f0       	breq	.+42     	; 0x988 <__floatsisf+0x40>
 95e:	f9 2f       	mov	r31, r25
 960:	96 e9       	ldi	r25, 0x96	; 150
 962:	bb 27       	eor	r27, r27
 964:	93 95       	inc	r25
 966:	f6 95       	lsr	r31
 968:	87 95       	ror	r24
 96a:	77 95       	ror	r23
 96c:	67 95       	ror	r22
 96e:	b7 95       	ror	r27
 970:	f1 11       	cpse	r31, r1
 972:	f8 cf       	rjmp	.-16     	; 0x964 <__floatsisf+0x1c>
 974:	fa f4       	brpl	.+62     	; 0x9b4 <__floatsisf+0x6c>
 976:	bb 0f       	add	r27, r27
 978:	11 f4       	brne	.+4      	; 0x97e <__floatsisf+0x36>
 97a:	60 ff       	sbrs	r22, 0
 97c:	1b c0       	rjmp	.+54     	; 0x9b4 <__floatsisf+0x6c>
 97e:	6f 5f       	subi	r22, 0xFF	; 255
 980:	7f 4f       	sbci	r23, 0xFF	; 255
 982:	8f 4f       	sbci	r24, 0xFF	; 255
 984:	9f 4f       	sbci	r25, 0xFF	; 255
 986:	16 c0       	rjmp	.+44     	; 0x9b4 <__floatsisf+0x6c>
 988:	88 23       	and	r24, r24
 98a:	11 f0       	breq	.+4      	; 0x990 <__floatsisf+0x48>
 98c:	96 e9       	ldi	r25, 0x96	; 150
 98e:	11 c0       	rjmp	.+34     	; 0x9b2 <__floatsisf+0x6a>
 990:	77 23       	and	r23, r23
 992:	21 f0       	breq	.+8      	; 0x99c <__floatsisf+0x54>
 994:	9e e8       	ldi	r25, 0x8E	; 142
 996:	87 2f       	mov	r24, r23
 998:	76 2f       	mov	r23, r22
 99a:	05 c0       	rjmp	.+10     	; 0x9a6 <__floatsisf+0x5e>
 99c:	66 23       	and	r22, r22
 99e:	71 f0       	breq	.+28     	; 0x9bc <__floatsisf+0x74>
 9a0:	96 e8       	ldi	r25, 0x86	; 134
 9a2:	86 2f       	mov	r24, r22
 9a4:	70 e0       	ldi	r23, 0x00	; 0
 9a6:	60 e0       	ldi	r22, 0x00	; 0
 9a8:	2a f0       	brmi	.+10     	; 0x9b4 <__floatsisf+0x6c>
 9aa:	9a 95       	dec	r25
 9ac:	66 0f       	add	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	da f7       	brpl	.-10     	; 0x9aa <__floatsisf+0x62>
 9b4:	88 0f       	add	r24, r24
 9b6:	96 95       	lsr	r25
 9b8:	87 95       	ror	r24
 9ba:	97 f9       	bld	r25, 7
 9bc:	08 95       	ret

000009be <__fp_inf>:
 9be:	97 f9       	bld	r25, 7
 9c0:	9f 67       	ori	r25, 0x7F	; 127
 9c2:	80 e8       	ldi	r24, 0x80	; 128
 9c4:	70 e0       	ldi	r23, 0x00	; 0
 9c6:	60 e0       	ldi	r22, 0x00	; 0
 9c8:	08 95       	ret

000009ca <__fp_mintl>:
 9ca:	88 23       	and	r24, r24
 9cc:	71 f4       	brne	.+28     	; 0x9ea <__fp_mintl+0x20>
 9ce:	77 23       	and	r23, r23
 9d0:	21 f0       	breq	.+8      	; 0x9da <__fp_mintl+0x10>
 9d2:	98 50       	subi	r25, 0x08	; 8
 9d4:	87 2b       	or	r24, r23
 9d6:	76 2f       	mov	r23, r22
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__fp_mintl+0x1e>
 9da:	66 23       	and	r22, r22
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__fp_mintl+0x18>
 9de:	99 27       	eor	r25, r25
 9e0:	0d c0       	rjmp	.+26     	; 0x9fc <__fp_mintl+0x32>
 9e2:	90 51       	subi	r25, 0x10	; 16
 9e4:	86 2b       	or	r24, r22
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	60 e0       	ldi	r22, 0x00	; 0
 9ea:	2a f0       	brmi	.+10     	; 0x9f6 <__fp_mintl+0x2c>
 9ec:	9a 95       	dec	r25
 9ee:	66 0f       	add	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	da f7       	brpl	.-10     	; 0x9ec <__fp_mintl+0x22>
 9f6:	88 0f       	add	r24, r24
 9f8:	96 95       	lsr	r25
 9fa:	87 95       	ror	r24
 9fc:	97 f9       	bld	r25, 7
 9fe:	08 95       	ret

00000a00 <__fp_mpack>:
 a00:	9f 3f       	cpi	r25, 0xFF	; 255
 a02:	31 f0       	breq	.+12     	; 0xa10 <__fp_mpack_finite+0xc>

00000a04 <__fp_mpack_finite>:
 a04:	91 50       	subi	r25, 0x01	; 1
 a06:	20 f4       	brcc	.+8      	; 0xa10 <__fp_mpack_finite+0xc>
 a08:	87 95       	ror	r24
 a0a:	77 95       	ror	r23
 a0c:	67 95       	ror	r22
 a0e:	b7 95       	ror	r27
 a10:	88 0f       	add	r24, r24
 a12:	91 1d       	adc	r25, r1
 a14:	96 95       	lsr	r25
 a16:	87 95       	ror	r24
 a18:	97 f9       	bld	r25, 7
 a1a:	08 95       	ret

00000a1c <__fp_nan>:
 a1c:	9f ef       	ldi	r25, 0xFF	; 255
 a1e:	80 ec       	ldi	r24, 0xC0	; 192
 a20:	08 95       	ret

00000a22 <__fp_pscA>:
 a22:	00 24       	eor	r0, r0
 a24:	0a 94       	dec	r0
 a26:	16 16       	cp	r1, r22
 a28:	17 06       	cpc	r1, r23
 a2a:	18 06       	cpc	r1, r24
 a2c:	09 06       	cpc	r0, r25
 a2e:	08 95       	ret

00000a30 <__fp_pscB>:
 a30:	00 24       	eor	r0, r0
 a32:	0a 94       	dec	r0
 a34:	12 16       	cp	r1, r18
 a36:	13 06       	cpc	r1, r19
 a38:	14 06       	cpc	r1, r20
 a3a:	05 06       	cpc	r0, r21
 a3c:	08 95       	ret

00000a3e <__fp_round>:
 a3e:	09 2e       	mov	r0, r25
 a40:	03 94       	inc	r0
 a42:	00 0c       	add	r0, r0
 a44:	11 f4       	brne	.+4      	; 0xa4a <__fp_round+0xc>
 a46:	88 23       	and	r24, r24
 a48:	52 f0       	brmi	.+20     	; 0xa5e <__fp_round+0x20>
 a4a:	bb 0f       	add	r27, r27
 a4c:	40 f4       	brcc	.+16     	; 0xa5e <__fp_round+0x20>
 a4e:	bf 2b       	or	r27, r31
 a50:	11 f4       	brne	.+4      	; 0xa56 <__fp_round+0x18>
 a52:	60 ff       	sbrs	r22, 0
 a54:	04 c0       	rjmp	.+8      	; 0xa5e <__fp_round+0x20>
 a56:	6f 5f       	subi	r22, 0xFF	; 255
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__fp_split3>:
 a60:	57 fd       	sbrc	r21, 7
 a62:	90 58       	subi	r25, 0x80	; 128
 a64:	44 0f       	add	r20, r20
 a66:	55 1f       	adc	r21, r21
 a68:	59 f0       	breq	.+22     	; 0xa80 <__fp_splitA+0x10>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	71 f0       	breq	.+28     	; 0xa8a <__fp_splitA+0x1a>
 a6e:	47 95       	ror	r20

00000a70 <__fp_splitA>:
 a70:	88 0f       	add	r24, r24
 a72:	97 fb       	bst	r25, 7
 a74:	99 1f       	adc	r25, r25
 a76:	61 f0       	breq	.+24     	; 0xa90 <__fp_splitA+0x20>
 a78:	9f 3f       	cpi	r25, 0xFF	; 255
 a7a:	79 f0       	breq	.+30     	; 0xa9a <__fp_splitA+0x2a>
 a7c:	87 95       	ror	r24
 a7e:	08 95       	ret
 a80:	12 16       	cp	r1, r18
 a82:	13 06       	cpc	r1, r19
 a84:	14 06       	cpc	r1, r20
 a86:	55 1f       	adc	r21, r21
 a88:	f2 cf       	rjmp	.-28     	; 0xa6e <__fp_split3+0xe>
 a8a:	46 95       	lsr	r20
 a8c:	f1 df       	rcall	.-30     	; 0xa70 <__fp_splitA>
 a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <__fp_splitA+0x30>
 a90:	16 16       	cp	r1, r22
 a92:	17 06       	cpc	r1, r23
 a94:	18 06       	cpc	r1, r24
 a96:	99 1f       	adc	r25, r25
 a98:	f1 cf       	rjmp	.-30     	; 0xa7c <__fp_splitA+0xc>
 a9a:	86 95       	lsr	r24
 a9c:	71 05       	cpc	r23, r1
 a9e:	61 05       	cpc	r22, r1
 aa0:	08 94       	sec
 aa2:	08 95       	ret

00000aa4 <__fp_trunc>:
 aa4:	0e 94 38 05 	call	0xa70	; 0xa70 <__fp_splitA>
 aa8:	a0 f0       	brcs	.+40     	; 0xad2 <__fp_trunc+0x2e>
 aaa:	be e7       	ldi	r27, 0x7E	; 126
 aac:	b9 17       	cp	r27, r25
 aae:	88 f4       	brcc	.+34     	; 0xad2 <__fp_trunc+0x2e>
 ab0:	bb 27       	eor	r27, r27
 ab2:	9f 38       	cpi	r25, 0x8F	; 143
 ab4:	60 f4       	brcc	.+24     	; 0xace <__fp_trunc+0x2a>
 ab6:	16 16       	cp	r1, r22
 ab8:	b1 1d       	adc	r27, r1
 aba:	67 2f       	mov	r22, r23
 abc:	78 2f       	mov	r23, r24
 abe:	88 27       	eor	r24, r24
 ac0:	98 5f       	subi	r25, 0xF8	; 248
 ac2:	f7 cf       	rjmp	.-18     	; 0xab2 <__fp_trunc+0xe>
 ac4:	86 95       	lsr	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b1 1d       	adc	r27, r1
 acc:	93 95       	inc	r25
 ace:	96 39       	cpi	r25, 0x96	; 150
 ad0:	c8 f3       	brcs	.-14     	; 0xac4 <__fp_trunc+0x20>
 ad2:	08 95       	ret

00000ad4 <__fp_zero>:
 ad4:	e8 94       	clt

00000ad6 <__fp_szero>:
 ad6:	bb 27       	eor	r27, r27
 ad8:	66 27       	eor	r22, r22
 ada:	77 27       	eor	r23, r23
 adc:	cb 01       	movw	r24, r22
 ade:	97 f9       	bld	r25, 7
 ae0:	08 95       	ret

00000ae2 <_exit>:
 ae2:	f8 94       	cli

00000ae4 <__stop_program>:
 ae4:	ff cf       	rjmp	.-2      	; 0xae4 <__stop_program>
